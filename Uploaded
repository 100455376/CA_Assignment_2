main:
	addi	x2, x2, -16       	# Set the stack pointer.
	sd  	x8, 0(x2)         	# Store the frame pointer.
	addi	x8, x2, 16        	# Set the frame pointer.
	sd  	x1, -8(x8)        	# Store the return address.
    
	ld  	x10, 0(x18)       	# x10 = n
	add 	x11, x18, x0      	# x11 = A
	add 	x12, x20, x0      	# x12 = C
	add 	x13, x19, x0      	# x13 = B
    
	jal 	x0, TowerOfHanoi  	# TowerOfHanoi(n, A, C, B)

	ld  	x1, -8(x8)        	# Restore the return address.
	ld  	x8, 0(x2)         	# Restore the frame pointer.
	addi	x2, x2, 16        	# Restore the stack pointer.
	add 	x10, x0, x0       	# return 0 at the end of main
	jalr	x0, 0(x1)         	# End of the program code

###########################
# Assignment 2: Functions #
###########################

# TowerOFHanoi function
TowerOfHanoi:
	# Base case
	beq x10, x0, EndRecursion   # branch to end if n == 0
    
	# Save registers that will use
	sd x1, 16(x2)            	# Save return address
	sd x11, 8(x2)            	# Save A
	sd x12, 0(x2)            	# Save C

	# 1st recursive call: TowerOfHanoi(n-1, A, B, C)
	addi x10, x10, -1        	# n to n-1
	add x14, x12, x0         	# Hold C
	add x12, x13, x0         	# Move B to C
	add x13, x14, x0         	# and C to B
	jal x1, TowerOfHanoi     	# Make the 1st recursive call

	# Restore the registers and adjust all (n, A, B, C) so to perform the next operation
	ld x12, 0(x2)            	# Restore C from previous saved
	ld x11, 8(x2)            	# Restore A from previous saved
	ld x1, 16(x2)            	# Restore ra from previosu saved
	addi x2, x2, 24          	# Adjust stack pointer too

	# Move the n disk(A to C) and load top disk from A
	ld x14, 0(x11)           	# Load temporarily the num of disks in A to x14
	slli x14, x14, 3         	# Multiply by 8 (to get offset)
	add x14, x14, x11        	# to get address of the top disk
	ld x15, 0(x14)           	# and load it
	sd x15, 0(x12)           	# Store the disk in C  
    
	# 2nd recursive call: TowerOfHanoi(n-1, B, C, A)
	add x14, x13, x0         	# Store B temporarily
	add x13, x11, x0         	# Swap B and A
	add x11, x14, x0         	# Swap A and B too
	jal x1, TowerOfHanoi     	# Make the 2nd recursive call, now swpped

# Base case:
EndRecursion:
	jalr x0, 0(x1)           	# Return from the function

