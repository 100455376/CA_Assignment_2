main:
addi    x2,     x2,     -16   # Set the stack pointer.
sd      x8,     0(x2)         # Store the frame pointer.
addi    x8,     x2,      16   # Set the frame pointer.
sd      x1,     -8(x8)        # Store the return address.
ld      x10,    0(x18)        # x10 = n

add     x11,    x18,     x0   # x11 = A
add     x12,    x20,     x0   # x12 = C
add     x13,    x19,     x0   # x13 = B
jal     x1,     TowerOfHanoi  # TowerOfHanoi(n, A, C, B)

ld      x1,     -8(x8)       # Restore the return address.
ld      x8,     0(x2)        # Restore the frame pointer.
addi    x2,     x2,     16   # Restore the stack pointer.
add     x10,    x0,     x0   # return 0 at the end of main
jalr    x0,     0(x1)        # End of the program code

###########################
# Assignment 2: Functions #
###########################
TowerOfHanoi:
    # Setup stack frame
    addi    x2, x2, -64         # Allocate stack space
    sd      x1, 56(x2)          # Save return address
    sd      x8, 48(x2)          # Save frame pointer
    addi    x8, x2, 64          # Set new frame pointer

    # Save argument registers
    sd      x10, 40(x2)         # Save n
    sd      x11, 32(x2)         # Save from
    sd      x12, 24(x2)         # Save to
    sd      x13, 16(x2)         # Save aux

    # Save callee-saved registers (according to the assignment's specification)
    sd      x18, 0(x2)
    # Continue saving x19 through x27 if they will be used in this function

    # Base case check
    beq     x10, x0, end_recursive

    # Prepare for recursive call for TowerOfHanoi(n-1, from, aux, to)
    addi    x10, x10, -1        # Decrement n for the recursive call
    add     x1, x11, x0         # Move current 'from' to 'to' for recursive call
    add     x11, x13, x0        # Move current 'aux' to 'from'
    add     x13, x12, x0        # Move current 'to' to 'aux'
    add     x12, x1, x0         # Restore 'to' for recursive call
    jal     x1, TowerOfHanoi    # Recursive call TowerOfHanoi(n-1, from, aux, to)


    # Move the disk from 'from' to 'to'
    ld      x5, 0(x11)          # Load from[0] into x5
    ld      x6, 0(x12)          # Load to[0] into x6
    addi    x6, x6, 1           # Increment to[0]
    add     x6, x6, x20         # Calculate address to store disk
    add     x5, x5, x18         # Calculate address to load disk
    ld      x7, 0(x5)           # Load the disk from 'from'
    sd      x7, 0(x6)           # Store the disk to 'to'
    sd      x6, 0(x12)          # Update to[0]
    addi    x9, x9, 1           # Increment num_moves

    # Recursive call for TowerOfHanoi(n-1, aux, to, from)
    ld      x10, 40(x2)         # Reload n
    addi    x10, x10, -1        # Decrement n
    add     x1, x13, x0         # Move current 'aux' to 'from'
    add     x13, x11, x0        # Move current 'from' to 'aux'
    add     x11, x12, x0        # Move current 'to' to 'from'
    add     x12, x1, x0         # Restore 'to'
    jal     x1, TowerOfHanoi    # Recursive call TowerOfHanoi(n-1, aux, to, from)


end_recursive:
    # Restore argument registers and frame pointer
    ld      x10, 40(x2)
    ld      x11, 32(x2)
    ld      x12, 24(x2)
    ld      x13, 16(x2)

    # Restore callee-saved registers (according to the assignment's specification)
    ld      x18, 0(x2)
    # Continue restoring x19 through x27 if they were saved earlier

    ld      x8, 48(x2)          # Restore frame pointer
    ld      x1, 56(x2)          # Restore return address
    addi    x2, x2, 64          # Deallocate stack space
    jalr    x0, 0(x1)           # Return from function
