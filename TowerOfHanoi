main:
addi    x2,     x2,     -16   # Set the stack pointer.
sd      x8,     0(x2)         # Store the frame pointer.
addi    x8,     x2,      16   # Set the frame pointer.
sd      x1,     -8(x8)        # Store the return address.
ld      x10,    0(x18)        # x10 = n

add     x11,    x18,     x0   # x11 = A
add     x12,    x20,     x0   # x12 = C
add     x13,    x19,     x0   # x13 = B
jal     x1,     TowerOfHanoi  # TowerOfHanoi(n, A, C, B)

ld      x1,     -8(x8)       # Restore the return address.
ld      x8,     0(x2)        # Restore the frame pointer.
addi    x2,     x2,     16   # Restore the stack pointer.
add     x10,    x0,     x0   # return 0 at the end of main
jalr    x0,     0(x1)        # End of the program code

###########################
# Assignment 2: Functions #
###########################
# TowerOfHanoi Function (Recursive)
# Assuming that x10 = n, x11 = A, x12 = C, x13 = B initially passed
TowerOfHanoi:
    # Base case check: if n == 0, return
    beq x10, x0, ExitRecursion   # if n == 0, skip the recursive operations
    
    # Save registers that will be used
    addi x2, x2, -24             # Adjust stack pointer to save 3 registers
    sd x1, 16(x2)                # Save return address
    sd x11, 8(x2)                # Save A
    sd x12, 0(x2)                # Save C

    # Recursive call: TowerOfHanoi(n-1, A, B, C)
    addi x10, x10, -1            # Decrement n
    add x14, x12, x0             # Temporarily hold C
    add x12, x13, x0             # Move B to C
    add x13, x14, x0             # Move C to B
    jal x1, TowerOfHanoi         # Recursive Call

    # Restore registers and adjust n, A, B, C for the next operation
    ld x12, 0(x2)                # Restore C
    ld x11, 8(x2)                # Restore A
    ld x1, 16(x2)                # Restore return address
    addi x2, x2, 24              # Adjust stack pointer back

    # Move the nth disk from A to C
    # Load top disk from A (last index of A)
    ld x14, 0(x11)               # Load number of disks in A to x14
    slli x14, x14, 3             # Calculate offset (assuming each entry is 8 bytes)
    add x14, x14, x11            # Calculate address of the top disk
    ld x15, 0(x14)               # Load the top disk
    sd x15, 0(x12)               # Store the disk to C (simplified)
    
    # Recursive call: TowerOfHanoi(n-1, B, C, A)
    add x14, x13, x0             # Swap A and B for the recursive call
    add x13, x11, x0
    add x11, x14, x0
    jal x1, TowerOfHanoi         # Recursive Call

ExitRecursion:
    jr x1                        # Return from the function
